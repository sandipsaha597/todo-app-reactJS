{"version":3,"sources":["components/TodoContext.js","components/AddTodo.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","useState","id","title","todos","setTodos","Provider","value","children","AddTodo","useContext","currentTodo","setCurrentTodo","length","count","setCount","btn","document","querySelector","className","type","placeholder","onChange","e","target","onClick","prevCount","x","clientX","offsetLeft","y","clientY","offsetTop","ripples","createElement","appendChild","style","left","top","setTimeout","remove","ripple","disabled","modal","hidden","pointerEvents","opacity","transform","show","Todo","deleteIcon","icon","faTrashAlt","editIcon","faPencilAlt","closeIcon","faTimes","editATodo","setEditATodo","modalShow","setModalShow","currentEditId","setCurrentEditId","deleteTodo","newTodos","splice","editTodo","btn2","map","todo","index","key","newSave","saveTodo","getBoundingClientRect","console","log","ripple2","App","name","setName","trim","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a9513313.chunk.js","sourcesContent":["import React,{useState, createContext} from 'react'\r\n\r\nexport const TodoContext = createContext()\r\n\r\nexport function TodoProvider(props) {\r\n    \r\n    const [todos, setTodos] = useState([\r\n        {\r\n            id: 1,\r\n            title: \"Programmers count from Zero\"\r\n        },\r\n        {\r\n            id: 2,\r\n            title: \"It has CRUD functionality.\"\r\n        },\r\n        {\r\n            id: 3,\r\n            title: \"It's a todo list app\"\r\n        }\r\n    ])\r\n\r\n    return (\r\n        <TodoContext.Provider value={[todos, setTodos]}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport {TodoContext} from './TodoContext'\r\n\r\nfunction AddTodo() {\r\n\r\n    const [todos, setTodos] = useContext(TodoContext)\r\n    const [currentTodo, setCurrentTodo] = useState('')\r\n    const [count, setCount] = useState(todos.length + 1)\r\n\r\n    const updateTodo = () => {\r\n        setCount(prevCount => prevCount + 1)\r\n        \r\n        setTodos([...todos, \r\n            {\r\n                id: count,\r\n                title: currentTodo\r\n            }\r\n        ])\r\n        setCurrentTodo('')\r\n    }\r\n\r\n    const btn = document.querySelector('.sandip-btn')\r\n    const ripple = (e) => {\r\n        let x = e.clientX - e.target.offsetLeft,\r\n        y = e.clientY - e.target.offsetTop\r\n        \r\n\r\n        let ripples = document.createElement('span');\r\n        btn.appendChild(ripples)\r\n        ripples.style.left = x + \"px\";\r\n        ripples.style.top = y + \"px\";\r\n      \r\n        setTimeout(() => {\r\n          ripples.remove()\r\n        }, 5000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"data-submit\">\r\n            <input type=\"text\"\r\n            placeholder=\"What's your focus today\"\r\n            value={currentTodo} \r\n            onChange={e => setCurrentTodo(e.target.value)} />\r\n            <button className=\"sandip-btn\" onClick={e => {\r\n                updateTodo()\r\n                ripple(e)\r\n                }\r\n            }\r\n                disabled={!currentTodo.length}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTodo\r\n","import React, {useState, useContext} from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faPencilAlt, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport {TodoContext} from './TodoContext'\r\nimport AddTodo from './AddTodo'\r\n\r\nfunction Todo() {\r\n    const [todos, setTodos] = useContext(TodoContext)\r\n\r\n    const deleteIcon = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const editIcon = <FontAwesomeIcon icon={faPencilAlt} />\r\n    const closeIcon = <FontAwesomeIcon icon={faTimes} />\r\n\r\n    const [editATodo, setEditATodo] = useState('')\r\n    const [modalShow, setModalShow] = useState(false)\r\n    const [currentEditId, setCurrentEditId] = useState(0)\r\n    \r\n    const deleteTodo = e => {\r\n        let newTodos = [...todos]\r\n        newTodos.splice(e.target.id, 1)\r\n        setTodos(newTodos)\r\n        \r\n    }\r\n\r\n    const editTodo = e => {\r\n        setModalShow(true)\r\n        setCurrentEditId(e.target.id)        \r\n        setEditATodo(todos[e.target.id].title)\r\n    }\r\n\r\n    const saveTodo = () => {\r\n        const newSave = [...todos]\r\n        newSave[currentEditId].title = editATodo\r\n        setTodos(newSave);\r\n        setEditATodo('')\r\n        setModalShow(false)\r\n    }\r\n\r\n    const btn2 = document.querySelector('.edit-box button.sandip-btn')\r\n\r\n    const ripple2 = (e) => {\r\n        let x = e.clientX - e.target.getBoundingClientRect().left,\r\n        y = e.clientY - e.target.getBoundingClientRect().top\r\n        \r\n        // console.log(\"ripple\", x, y);\r\n        \r\n        console.log(\"ripple\", e.clientX, e.clientY);\r\n        console.log(\"ripple offset\", e.target.offsetLeft, e.target.offsetTop);\r\n\r\n        let ripples = document.createElement('span');\r\n        btn2.appendChild(ripples)\r\n        ripples.style.left = x + \"px\";\r\n        ripples.style.top = y + \"px\";\r\n      \r\n        setTimeout(() => {\r\n          ripples.remove()\r\n        }, 6000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <AddTodo/>\r\n            <ul className=\"todo-list\">\r\n                {todos.map((todo, index) => <li key={index}>\r\n                        <span>{index} : {todo.title}</span>\r\n                        <div className=\"buttons\">\r\n                            <button \r\n                            onClick={deleteTodo}\r\n                            id={index}>\r\n                                {deleteIcon}\r\n                            </button>\r\n                            <button type=\"button\"\r\n                            id={index}\r\n                            onClick={editTodo} >\r\n                                {editIcon}\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n            <div className=\"edit-box\" \r\n                style={modalShow ? modal.show : modal.hidden}>\r\n                <input type=\"text\" \r\n                value={editATodo} \r\n                onChange={e => setEditATodo(e.target.value)} />\r\n                <button className=\"sandip-btn\" onClick={(e) => {\r\n                    saveTodo()\r\n                    ripple2(e)\r\n                    }\r\n                } disabled={!editATodo.length}>Save</button>\r\n                <button onClick={() => setModalShow(false)} id=\"close\">{closeIcon}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst modal = {\r\n    hidden : {\r\n        pointerEvents: \"none\",\r\n        opacity: 0,\r\n        transform: \"translate(-50%, -50%) scale(.8)\"\r\n    },\r\n    show : {\r\n        opacity: 1,\r\n        pointerEvents: \"all\",\r\n        transform: \"translate(-50%, -50%) scale(1)\"\r\n    }\r\n  }\r\n\r\nexport default Todo\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Todo from './components/Todo';\n\nimport {TodoProvider} from './components/TodoContext'\n\nfunction App() {\n\n  const [name, setName] = useState('')\n\n  return (\n    <div className=\"App\">\n      <h2>Welcome <span className={name.trim() === '' ? \"name-placeholder\" : \"name\"}>\n        {name.trim() === '' ? \"Your Name\" : name }</span>\n      </h2>\n      <input type=\"text\" \n      className=\"name-input\"\n      placeholder=\"Your name\" \n      value={name} \n      onChange={e => setName(e.target.value)} />\n      <TodoProvider>\n        <Todo />\n      </TodoProvider>\n    </div>\n  );\n}\n\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}