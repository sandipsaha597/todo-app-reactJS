{"version":3,"sources":["components/TodoContext.js","components/AddTodo.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","useState","id","title","todos","setTodos","useEffect","axios","get","then","res","data","Provider","value","children","AddTodo","useContext","currentTodo","setCurrentTodo","length","count","setCount","btn","document","querySelector","className","type","placeholder","onChange","e","target","onClick","prevCount","x","clientX","offsetLeft","y","clientY","offsetTop","ripples","createElement","appendChild","style","left","top","setTimeout","remove","ripple","disabled","modal","hidden","pointerEvents","opacity","transform","show","Todo","deleteIcon","icon","faTrashAlt","editIcon","faPencilAlt","closeIcon","faTimes","editATodo","setEditATodo","modalShow","setModalShow","currentEditId","setCurrentEditId","deleteTodo","newTodos","splice","editTodo","btn2","map","todo","index","key","newSave","saveTodo","getBoundingClientRect","ripple2","App","name","setName","trim","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3714c3c.chunk.js","sourcesContent":["import React,{useState, useEffect, createContext} from 'react'\r\nimport axios from 'axios'\r\n\r\nexport const TodoContext = createContext()\r\n\r\nexport function TodoProvider(props) {\r\n    \r\n    const [todos, setTodos] = useState([\r\n        {\r\n            id: 1,\r\n            title: \"Loading...\"\r\n        }\r\n    ])\r\n\r\n    useEffect(() => {\r\n        // console.log(todos);\r\n        axios.get('https://shielded-island-06481.herokuapp.com/api/todos')\r\n        .then((res) => {\r\n            setTodos(res.data)\r\n        })\r\n        \r\n    }, [])\r\n\r\n    return (\r\n        <TodoContext.Provider value={[todos, setTodos]}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    )\r\n}\r\n","import React, {useState, useContext} from 'react'\r\nimport {TodoContext} from './TodoContext'\r\n\r\nfunction AddTodo() {\r\n\r\n    const [todos, setTodos] = useContext(TodoContext)\r\n    const [currentTodo, setCurrentTodo] = useState('')\r\n    const [count, setCount] = useState(todos.length + 1)\r\n\r\n    const updateTodo = () => {\r\n        setCount(prevCount => prevCount + 1)\r\n        \r\n        setTodos([...todos, \r\n            {\r\n                id: count,\r\n                title: currentTodo\r\n            }\r\n        ])\r\n        setCurrentTodo('')\r\n    }\r\n\r\n    const btn = document.querySelector('.sandip-btn')\r\n    const ripple = (e) => {\r\n        let x = e.clientX - e.target.offsetLeft,\r\n        y = e.clientY - e.target.offsetTop\r\n        \r\n\r\n        let ripples = document.createElement('span');\r\n        btn.appendChild(ripples)\r\n        ripples.style.left = x + \"px\";\r\n        ripples.style.top = y + \"px\";\r\n      \r\n        setTimeout(() => {\r\n          ripples.remove()\r\n        }, 5000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"data-submit\">\r\n            <input type=\"text\"\r\n            placeholder=\"What's your focus today\"\r\n            value={currentTodo} \r\n            onChange={e => setCurrentTodo(e.target.value)} />\r\n            <button className=\"sandip-btn\" onClick={e => {\r\n                updateTodo()\r\n                ripple(e)\r\n                }\r\n            }\r\n                disabled={!currentTodo.length}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTodo\r\n","import React, {useState, useContext} from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt, faPencilAlt, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport {TodoContext} from './TodoContext'\r\nimport AddTodo from './AddTodo'\r\n\r\nfunction Todo() {\r\n    const [todos, setTodos] = useContext(TodoContext)\r\n\r\n    const deleteIcon = <FontAwesomeIcon icon={faTrashAlt} />\r\n    const editIcon = <FontAwesomeIcon icon={faPencilAlt} />\r\n    const closeIcon = <FontAwesomeIcon icon={faTimes} />\r\n\r\n    const [editATodo, setEditATodo] = useState('')\r\n    const [modalShow, setModalShow] = useState(false)\r\n    const [currentEditId, setCurrentEditId] = useState(0)\r\n    \r\n    const deleteTodo = e => {\r\n        let newTodos = [...todos]\r\n        newTodos.splice(e.target.id, 1)\r\n        setTodos(newTodos)\r\n        \r\n    }\r\n\r\n    const editTodo = e => {\r\n        setModalShow(true)\r\n        setCurrentEditId(e.target.id)        \r\n        setEditATodo(todos[e.target.id].title)\r\n    }\r\n\r\n    const saveTodo = () => {\r\n        const newSave = [...todos]\r\n        newSave[currentEditId].title = editATodo\r\n        setTodos(newSave);\r\n        setEditATodo('')\r\n        setModalShow(false)\r\n    }\r\n\r\n    const btn2 = document.querySelector('.edit-box button.sandip-btn')\r\n\r\n    const ripple2 = (e) => {\r\n        let x = e.clientX - e.target.getBoundingClientRect().left,\r\n        y = e.clientY - e.target.getBoundingClientRect().top\r\n\r\n        let ripples = document.createElement('span');\r\n        btn2.appendChild(ripples)\r\n        ripples.style.left = x + \"px\";\r\n        ripples.style.top = y + \"px\";\r\n      \r\n        setTimeout(() => {\r\n          ripples.remove()\r\n        }, 6000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"todo\">\r\n            <AddTodo/>\r\n            <ul className=\"todo-list\">\r\n                {todos.map((todo, index) => <li key={index}>\r\n                        <span>{index} : {todo.title}</span>\r\n                        <div className=\"buttons\">\r\n                            <button \r\n                            onClick={deleteTodo}\r\n                            id={index}>\r\n                                {deleteIcon}\r\n                            </button>\r\n                            <button type=\"button\"\r\n                            id={index}\r\n                            onClick={editTodo} >\r\n                                {editIcon}\r\n                            </button>\r\n                        </div>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n            <div className=\"edit-box\" \r\n                style={modalShow ? modal.show : modal.hidden}>\r\n                <input type=\"text\" \r\n                value={editATodo} \r\n                onChange={e => setEditATodo(e.target.value)} />\r\n                <button className=\"sandip-btn\" onClick={(e) => {\r\n                    saveTodo()\r\n                    ripple2(e)\r\n                    }\r\n                } disabled={!editATodo.length}>Save</button>\r\n                <button onClick={() => setModalShow(false)} id=\"close\">{closeIcon}</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst modal = {\r\n    hidden : {\r\n        pointerEvents: \"none\",\r\n        opacity: 0,\r\n        transform: \"translate(-50%, -50%) scale(.8)\"\r\n    },\r\n    show : {\r\n        opacity: 1,\r\n        pointerEvents: \"all\",\r\n        transform: \"translate(-50%, -50%) scale(1)\"\r\n    }\r\n  }\r\n\r\nexport default Todo\r\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport Todo from './components/Todo';\r\n\r\nimport {TodoProvider} from './components/TodoContext'\r\n\r\nfunction App() {\r\n\r\n  const [name, setName] = useState('')\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h2>Welcome <span className={name.trim() === '' ? \"name-placeholder\" : \"name\"}>\r\n        {name.trim() === '' ? \"Your Name\" : name }</span>\r\n      </h2>\r\n      <input type=\"text\" \r\n      className=\"name-input\"\r\n      placeholder=\"Your name\" \r\n      value={name} \r\n      onChange={e => setName(e.target.value)} />\r\n      <TodoProvider>\r\n        <Todo />\r\n      </TodoProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}